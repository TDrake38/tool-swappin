name: Backend Test
on: [push]
jobs:
  container-job:
      # Containers must run in Linux based operating systems
      runs-on: ubuntu-latest
      # Docker Hub image that `container-job` executes in
      container: node:10.18-jessie

      # Service containers to run with `container-job`
      services:
        # Label used to access the service container
        postgres:
          # Docker Hub image
          image: postgres
          # Provide the password for postgres
          env:
            POSTGRES_PASSWORD: postgres
          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

      steps:
        # Downloads a copy of the code in your repository before running CI tests
        - name: Check out repository code
          uses: actions/checkout@v3

        # Performs a clean installation of all dependencies in the `package.json` file
        # For more information, see https://docs.npmjs.com/cli/ci.html
        - name: Install dependencies
          run: npm ci
          working-directory: ./backend

        - name: Connect to PostgreSQL
          # Runs a script that creates a PostgreSQL table, populates
          # the table with data, and then retrieves the data.
          run: node client.js
          working-directory: ./backend
          # Environment variables used by the `client.js` script to create a new PostgreSQL table.
          env:
            # The hostname used to communicate with the PostgreSQL service container
            POSTGRES_HOST: postgres
            # The default PostgreSQL port
            POSTGRES_PORT: 5432
  Build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: use node js
        uses: actions/setup-node@v3
        with: 
          node-version: '14.x'
      - run: npm ci
        working-directory: ./backend
      - run: npm run build --if-present
        working-directory: ./backend
      - run: npm test
        working-directory: ./backend